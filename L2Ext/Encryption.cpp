#include "stdafx.h"
#include "Encryption.h"
#include "Random.h"
#include "CliExt.h"

extern BOOL g_PacketLog;

void EncryptWrapper(CSocket *pSocket, CIOBuffer *pBuffer)
{
	guard;
	
	if(pSocket->ValidUserSocket())
	{
		if(pBuffer)
		{
#ifdef EXTEND_IOBUFFER
			if(g_PacketLog)
			{
				g_Log.Add(CLog::Blue, "Out packet[%x]", pBuffer->buffEx[2]);
			}
			pSocket->pCoder->Encrypt(pBuffer->buffEx, 2, (pBuffer->size - 2));
#else
			pSocket->pCoder->Encrypt(pBuffer->buff, 2, (pBuffer->size - 2));
#endif
		}
	}else
	{
		CUserSocket *pUS = pSocket->CastUserSocket();
		if(pUS->socketStatus == 2)
		{
			//nothing
		}
		else
		{
			g_Log.Add(CLog::Error, "[%s] Not CUserSocket!", __FUNCTION__);
		}
	}
	unguard;
}

void DecryptWrapper(CUserSocket *pSocket, int nOffset)
{
	guard;
	if(pSocket->ValidUserSocket())
	{
#ifdef EXTEND_IOBUFFER
		unsigned char* packet = pSocket->pIncommingPacket->buffEx;
		const UINT maxPacketSize = 16384;
#else
		unsigned char* packet = pSocket->pIncommingPacket->buff;
		const UINT maxPacketSize = 8192;
#endif
		if(pSocket->pCoder)
		{
			UINT size = pSocket->inPckSize;
			if(size <= maxPacketSize)
			{
				if(g_CliExt.IsEnabled())
				{
					g_CliExt.DecryptPacket(pSocket, &packet[nOffset], size);
				}
				pSocket->pCoder->Decrypt(packet, nOffset, size);
				if(g_CliExt.IsEnabled())
				{
					g_CliExt.HandleCheckSum(pSocket, &packet[nOffset], size);
				}
			}else
			{
				g_Log.Add(CLog::Error, "[%s] Invalid packet size[%d]", __FUNCTION__, size);
			}
		}
	}else
	{
		g_Log.Add(CLog::Error, "[%s] Not CUserSocket!", __FUNCTION__);
		pSocket->Close();
	}
	unguard;
}

BYTE g_StaticKey[80][16];	

void CPacketEncryption::Init()
{
	g_HookManager.WriteJump(0x61E62B, CloseIOSocketHook, 1);
	g_HookManager.WriteCall(0x878715, CPacketEncryption::KeyPacket, 23);
	
	g_HookManager.WriteCall(0x7D58DF, CPacketEncryption::EncryptCall, 0);
	g_HookManager.WriteCall(0x7D5A78, CPacketEncryption::EncryptCall, 0);
	g_HookManager.WriteCall(0x7D5AE5, CPacketEncryption::EncryptCall, 0);
	g_HookManager.WriteJump(0x7D55AC, InlineEncryptHook, 71);
	g_HookManager.WriteJump(0x8770F4, InlineDecryptHook, 102);

	//init keys
	for(int n=0;n<80;n++)
	{
		// randomize the 8 first bytes
		for (int j = 0; j < 8; j++)
		{
			g_StaticKey[n][j] = (BYTE)(rand() % 255);
		}

		// the last 8 bytes are static
		g_StaticKey[n][8] = (BYTE) 0xc8;
		g_StaticKey[n][9] = (BYTE) 0x27;
		g_StaticKey[n][10] = (BYTE) 0x93;
		g_StaticKey[n][11] = (BYTE) 0x01;
		g_StaticKey[n][12] = (BYTE) 0xa1;
		g_StaticKey[n][13] = (BYTE) 0x6c;
		g_StaticKey[n][14] = (BYTE) 0x31;
		g_StaticKey[n][15] = (BYTE) 0x97;
	}
}

void CPacketEncryption::KeyPacket(CUserSocket *pSocket, const char* format, BYTE opCode, BYTE validProtocol, int nSKey1, int nSKey2, int nSKey3)
{
	pSocket->pCoder = (CCoder*)L2Server::New(sizeof(CCoder));
	pSocket->_pCoder = pSocket->pCoder;
	pSocket->pCoder->Constructor();
	LPBYTE lpKey = CCoder::GenerateKey();
	BYTE key[16];
	memcpy(key, lpKey, 16);
	pSocket->pCoder->SetKey(key);

	if(g_CliExt.IsEnabled() && g_CliExt.GetVersion() == 7)
	{
		//encrypt the packet

		static const BYTE xorKey[32][8] = { 0xa2, 0x37, 0xd1, 0xb, 0xe1, 0xc8, 0xb5, 0xb1, 0x11, 0xca, 0x3a, 0xc, 0xb9, 0x5d, 0xa8, 0xe0, 0x21, 0x71, 0x8a, 0xdc, 0xe2, 0xd4, 0xfc, 0xdf, 0x9b, 0x84, 0x2d, 0x3c, 0xc6, 0x8, 0x6, 0x4b, 0xcf, 0x7a, 0x92, 0x15, 0x72, 0x83, 0xf5, 0xba, 0x4e, 0xa4, 0xca, 0x53, 0xf4, 0x5f, 0x9c, 0xaa, 0x22, 0x86, 0x64, 0xed, 0x79, 0x1d, 0xa5, 0x82, 0xa3, 0x4c, 0x1c, 0xfc, 0xde, 0xa5, 0xaa, 0xc2, 0x0, 0x5b, 0x18, 0xf3, 0xc, 0x7c, 0x69, 0x5d, 0x40, 0xc, 0xca, 0x5, 0xcf, 0xf2, 0x99, 0x11, 0x12, 0x80, 0x75, 0x97, 0x79, 0xa3, 0x1d, 0x8, 0x19, 0x90, 0x44, 0xea, 0xee, 0xe0, 0xbc, 0x76, 0xe3, 0xe8, 0x16, 0xce, 0x85, 0x68, 0x31, 0x6f, 0x90, 0x39, 0xd6, 0x85, 0x5b, 0x22, 0xcf, 0xd0, 0xf9, 0x86, 0x88, 0xbd, 0x6e, 0x6, 0xd6, 0x50, 0x99, 0xb0, 0xd6, 0xab, 0x42, 0x25, 0x6a, 0xa4, 0xfb, 0xf3, 0x6a, 0x4c, 0x23, 0xa4, 0x17, 0xd5, 0xd4, 0xa5, 0xb8, 0xc0, 0x15, 0xb6, 0x10, 0xaf, 0xc8, 0xa, 0x8e, 0xce, 0x50, 0xa1, 0xf3, 0x42, 0xb2, 0x4d, 0x32, 0x6e, 0x85, 0x9f, 0x4b, 0x95, 0xa9, 0x8c, 0x1b, 0x9e, 0x8b, 0xd8, 0x8c, 0x7e, 0x90, 0x19, 0x5c, 0x2e, 0xd4, 0x48, 0xd3, 0x79, 0x58, 0xc0, 0xa1, 0xbf, 0x77, 0x9e, 0x38, 0xcb, 0xd5, 0x4d, 0xd3, 0xee, 0xcf, 0x50, 0xad, 0x9e, 0x39, 0x11, 0x50, 0x80, 0xd4, 0xaf, 0xaa, 0x59, 0x24, 0xa1, 0xd7, 0xc2, 0xf5, 0x38, 0x43, 0x7, 0x58, 0xaa, 0x3, 0x13, 0xab, 0xf1, 0x11, 0xe6, 0x4d, 0xe3, 0x69, 0x6c, 0xa0, 0xf1, 0x8c, 0x16, 0xde, 0x24, 0x63, 0x34, 0x71, 0x1d, 0x32, 0x64, 0xde, 0x96, 0x6b, 0xb, 0x21, 0xaa, 0x29, 0x32, 0x9d, 0x12, 0x19, 0xc9, 0x1c, 0x52, 0x93, 0x90, 0x8b, 0x8e, 0xc4, 0xaf, 0xde, 0x23, 0x83, 0x5e };
//		static const BYTE xorKey[32][8] = { 0xc2, 0xc7, 0xd4, 0xb, 0xe1, 0xc8, 0xb5, 0xb1, 0x11, 0xca, 0x3a, 0xc, 0xb9, 0x5d, 0xa8, 0xe0, 0x21, 0x71, 0x8f, 0xdc, 0xe2, 0xd4, 0xfc, 0xdf, 0x9b, 0x84, 0x2d, 0x3c, 0xc6, 0x8, 0x6, 0x4b, 0xcf, 0x7a, 0x92, 0x15, 0x72, 0x83, 0xf5, 0xba, 0x4e, 0xa4, 0xca, 0x53, 0xf4, 0x5f, 0x9c, 0xaa, 0x22, 0x86, 0x64, 0xed, 0x79, 0x1d, 0xa5, 0x82, 0xa2, 0x4c, 0x1c, 0xfc, 0xde, 0xa5, 0x9a, 0xc2, 0x0, 0x5b, 0x18, 0xf3, 0xc, 0x7c, 0x69, 0x5d, 0x40, 0xc, 0xca, 0x5, 0xcf, 0xf2, 0x99, 0x11, 0x12, 0x80, 0x75, 0x97, 0x79, 0xa3, 0x1d, 0x8, 0x19, 0x90, 0x44, 0xea, 0xee, 0xe0, 0xbc, 0x76, 0xe3, 0xe8, 0x16, 0xce, 0x85, 0x68, 0x31, 0x6f, 0x90, 0x39, 0xd6, 0x85, 0x5b, 0x22, 0xcf, 0xd0, 0xf9, 0x86, 0x88, 0xbd, 0x6e, 0x6, 0xd6, 0x50, 0x99, 0xb0, 0xd6, 0xab, 0x42, 0x25, 0x6a, 0xa4, 0xfb, 0xf3, 0x6a, 0x4c, 0x23, 0xc4, 0x17, 0xd5, 0xd4, 0xa5, 0xb8, 0xc0, 0x12, 0xb6, 0x10, 0xaf, 0xc8, 0xa, 0x8e, 0xce, 0x50, 0xa1, 0xf3, 0x42, 0xb2, 0x4d, 0x32, 0x6e, 0x85, 0x9f, 0x4b, 0x95, 0xa9, 0x8c, 0x1b, 0x9e, 0x8b, 0xd8, 0x8c, 0x7e, 0x90, 0x19, 0x5c, 0x2e, 0xd4, 0x48, 0xd3, 0x79, 0x58, 0xc0, 0xa1, 0xbf, 0x77, 0x9e, 0x38, 0xcb, 0xd5, 0x4d, 0xd3, 0xee, 0xcf, 0x50, 0xad, 0x9e, 0x39, 0x11, 0x50, 0x80, 0xd4, 0xaf, 0xaa, 0x59, 0x24, 0xa1, 0xd7, 0xc2, 0xf5, 0x38, 0x43, 0x7, 0x68, 0xaa, 0x3, 0x13, 0xab, 0xf1, 0x11, 0xe6, 0x5d, 0xe3, 0x69, 0x6c, 0xa0, 0xf8, 0x8c, 0x16, 0xde, 0x24, 0x63, 0x34, 0x71, 0x1d, 0x32, 0x64, 0xde, 0x96, 0x6b, 0xb, 0x21, 0xaa, 0x29, 0x32, 0x9d, 0x12, 0x19, 0xc9, 0x1c, 0x52, 0x93, 0x90, 0x8b, 0x8e, 0xc4, 0xaf, 0xde, 0x23, 0x83, 0x5e };
		BYTE keyMap[8] = { 0 };
		for(UINT n=0;n<8;n++)
		{
			keyMap[n] = key[n] % 32;
			key[n] ^= xorKey[keyMap[n]][n];
		}
		pSocket->Send("ccbddb", opCode, validProtocol, 8, key, 1, 1, 8, keyMap);
		return;
	}

	pSocket->Send("ccbdd", opCode, validProtocol, 8, key, 1, 1);
}

void CPacketEncryption::EncryptCall(LPBYTE dest, LPBYTE src, LPVOID pKey, int size)
{
	CSocket *pSocket = (CSocket*)((UINT64)pKey - 0x128);
	if(pSocket->ValidUserSocket())
	{
		memmove(dest, src, size);
		pSocket->pCoder->Encrypt(dest, 0, size);
	}else
		g_Log.Add(CLog::Error, "[%s] Not CUserSocket!", __FUNCTION__);
}